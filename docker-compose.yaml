networks:
  weather-monitoring:
    name: "weather-monitoring"
    driver: bridge
    external: true

volumes:
  kafka_data:
    name: kafka_data
  zookeeper_data:
    name: zookeeper_data
  bitcask_data:
    name: bitcask_data
  jfr_data:
    name: centralstation_jfr
#  parquet_archive:
#    name: parquet_archive
  es_data:
    name: es_data

services:
  # ZooKeeper service for Kafka coordination
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    networks:
      - weather-monitoring
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  # Kafka message broker for data streaming
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    networks:
      - weather-monitoring
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper

  # Weather stations (10 instances)
  weather-station-1:
    image: weather-station
    container_name: weather-station-1
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-2:
    image: weather-station
    container_name: weather-station-2
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=2
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-3:
    image: weather-station
    container_name: weather-station-3
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=3
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-4:
    image: weather-station
    container_name: weather-station-4
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=4
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-5:
    image: weather-station
    container_name: weather-station-5
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=5
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-6:
    image: weather-station
    container_name: weather-station-6
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=6
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-7:
    image: weather-station
    container_name: weather-station-7
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=7
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-8:
    image: weather-station
    container_name: weather-station-8
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=8
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-9:
    image: weather-station
    container_name: weather-station-9
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=9
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  weather-station-10:
    image: weather-station
    container_name: weather-station-10
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=10
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  open-meteo:
    image: open-meteo
    container_name: open-meteo
    environment:
      - TZ=Africa/Cairo
      - STATION_ID=11
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LATITUDE=30.0444
      - LONGITUDE=31.2357
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  rain-detector:
    image: rain-detector
    container_name: rain-detector
    environment:
      - TZ=Africa/Cairo
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - weather-monitoring

  base-central-station:
    image: base-central-station
    container_name: base-central-station
    environment:
      - TZ=Africa/Cairo
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - APP_ID=central-station-app
      - INPUT_TOPIC=weather-data
      - BITCASK_DB_DIR=/data/bitcask_db
      - SERVER_PORT=8080
      - JAVA_TOOL_OPTIONS=-XX:+FlightRecorder -XX:StartFlightRecording=settings=profile,delay=60s,duration=120s,filename=/jfr/centralstation.jfr,maxsize=200M,maxage=24h
      - ARCHIVE_DIR=/data/parquet_archive
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    volumes:
      - bitcask_data:/data/bitcask_db
#      - parquet_archive:/data/parquet_archive
      - ./parquet_data:/data/parquet_archive
      - jfr_data:/jfr
    networks:
      - weather-monitoring

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_HOST=0.0.0.0  # Allow external access
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://localhost:5601/api/status || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10